#!/bin/bash

##########################################################################################
#   
#   gitmaketree - created by Jim Shaffer, 5/11/19
#       - makes it supper easy to switch back and forth from worktree to master (parent)
#       - helps eliminate being in the wrong directory when working
#       - adds a few extra checks when creating a worktree so you don't make mistakes
#       - shows ascii tree art
#
#   put this script somewhere in your path
#
#   !! to fix the path from growing when following symbolic links, do:
#      > gitmaketree install
#   or add the following yourself to ~./bashrc
#       alias cd='cd -P'
#
#   Does:
#   1) worktree add <path_new_worktree>  (this will also create a new branch)
#      check proper usage, new worktree not in same directory, not on master, uncommitted/unstaged files
#   2) make a symbolic link to the new worktree directory and add that to .gitignore
#   3) make a symbolic link in the new worktree directory back to parent and add that to it's .gitignore
#   4) copy_extra_stuff_path1/2 that creating a new worktree might not do
#   
##########################################################################################

# SETTINGS
warn_if_uncommited_unstaged_files=1 #1=yes, 0=no
warn_if_not_on_master=1             #1=yes, 0=no
warn_if_in_current_dir_or_path=1    #1=yes, 0=no
copy_extra_stuff_path1=""
copy_extra_stuff_path2=""

# USAGE
IFS= read -r -d '' usage <<EOF
usage: $0 <path_new_worktree>
       A new branch will be created from the name of the last directory in <path_new_worktree>.
       To fix the path from growing when following symbolic links, do:
           > $0 install
       or add the following to ~./bashrc
           alias cd=\'cd -P\'
EOF

add_alias_cd_to_bashrc () {
    echo "creating alias cd=\'cd -P\'." 
    echo "This will fix the path from growing when following symbolic links."
    echo
    echo >> ~/.bashrc
    echo "alias cd=\'cd -P\'  ### fix the path from growing when following symbolic links" >> ~/.bashrc
}


gitmaketree_function () {
    if [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) != "true" ]]; then
        echo "Not in a working repository. Exiting"
        exit 1
    else
        # WARNINGS
        rp=$(realpath "$1" 2>/dev/null); 
        if [[ -z $rp ]]; then rp="$1"; fi
        if (( $warn_if_in_current_dir_or_path )) && ( ! [[ "$rp" =~ "/" ]] || [[ "$(pwd)" =~ "$rp" ]] || [[ "$rp" =~ "$(pwd)" ]] ); then
            echo "WARNING: Worktree path should not be created inside the current directory or a sub-path"
            echo "     Current path      : $(pwd)"
            echo "     New worktree path : $rp"
            read -p "Continue [Y/N]? " reply1
            if ! [[ $reply1 =~ ^[Yy] ]]; then
                exit
            fi
        fi
        if (( $warn_if_not_on_master )) && [[ $(git rev-parse --abbrev-ref HEAD 2>/dev/null) != "master" ]]; then
            echo "WARNING: Not on master branch or latest commit:"
            git log --oneline | sed 's/^/    /g'
            read -p "Continue [Y/N]? " reply2
            if ! [[ $reply2 =~ ^[Yy] ]]; then
                exit
            fi
        fi
        if (( $warn_if_uncommited_unstaged_files )) && [[ $(git status --porcelain 2>/dev/null) ]]; then
            echo "WARNING: Uncommitted or unstaged files exist:"
            git status --porcelain | sed 's/^/    /g'
            read -p "Continue [Y/N]? " reply3
            if ! [[ $reply3 =~ ^[Yy] ]]; then
                exit
            fi
        fi

        # CREATE WORKTREE
        branch_name=$(basename "$1")
        git worktree add "$1"
        error=$?; (( $error )) && echo "Error using git worktree add ${1}." && exit 1

        # CREATE BRANCH LINK AND ADD TO GITIGNORE
        worktree_absolute_path=$(realpath "$1")
        ln -sf "$worktree_absolute_path" "_$branch_name"
        error=$?
        if (( $error )); then
            echo "Error unable to create link _$branch_name"
        else
            echo "> _$branch_name link created"
            if ! [[ -e .gitignore ]]; then
                # if it doesn't exist ignore itself
                touch .gitignore
                echo -e "\n.gitignore" >> .gitignore
                echo "> .gitignore created. .gitignore added to itself"
            else
                echo "> .gitignore already exists. .gitignore NOT added to itself. add manually if desired"
            fi
            sed -i '/^${branch_name}$/d' .gitignore
            echo -e "\n_${branch_name}" >> .gitignore
            echo "> _${branch_name} added to .gitignore"
        fi

        # CREATE PARENT LINK AND ADD TO GITIGNORE
        echo "> working in ${worktree_absolute_path}/ now"
        cwd=$(pwd)
        ln -sf "$cwd" "${worktree_absolute_path}/_parent"
        error=$?
        if (( $error )); then
            echo "Error unable to create link ${worktree_absolute_path}/_parent"
        else
            echo "> _parent link created"
            if ! [[ -e "${1}/.gitignore" ]]; then
                # if it doesn't exist ignore itself
                touch "${1}/.gitignore"
                echo -e "\n.gitignore" >> "${1}/.gitignore"
                echo "> .gitignore created. .gitignore added to itself"
            else
                echo "> .gitignore already exists. .gitignore NOT added to itself"
            fi
            sed -i '/^_parent$/d' "${1}/.gitignore"
            echo -e "\n_parent" >> "${1}/.gitignore"
            echo "> _parent added to .gitignore"
        fi

        # COPY EXTRA STUFF
        if [[ -n $copy_extra_stuff_path1 ]]; then
            echo "> copying $copy_extra_stuff_path1 to $1"
            \cp "$copy_extra_stuff_path1" "$1"
            error=$?; (( $error )) && echo "Error unable to copy $copy_extra_stuff_path1 to $1"
        fi
        if [[ -n $copy_extra_stuff_path2 ]]; then
            echo "> copying $copy_extra_stuff_path2 to $1"
            \cp "$copy_extra_stuff_path2" "$1"
            error=$?; (( $error )) && echo "Error unable to copy $copy_extra_stuff_path2 to $1"
        fi
    fi
}

##########################################################################################
#   
#  Start Here
#   
##########################################################################################

i_hate_trees=0
if (( ! $i_hate_trees )); then
cat <<'EOF'
                 ,@@@@@@@,
         ,,,.   ,@@@@@@/@@,  .oo8888o.
      ,&%%&%&&%,@@@@@/@@@@@@,8888\88/8o
     ,%&\%&&%&&%,@@@\@@@/@@@88\88888/88'
     %&&%&%&/%&&%@@\@@/ /@@@88888\88888'
     %&&%/ %&%%&&@@\ V /@@' `88\8 `/88'
     `&%\ ` /%&'    |.|        \ '|8'
         |o|        | |         | |
         |.|        | |         | |
  jgs \\/ ._\//_/__/  ,\_//__\\/.  \_//__/_

EOF
# https://asciiart.website/index.php?art=plants/trees
fi

if [[ -z $1 ]] || [[ $1 == "-h" ]] || [[ -n $2 ]]; then
    echo "$usage"
elif [[ $1 == "install" ]]; then
    add_alias_cd_to_bashrc
else
    gitmaketree_function $1 $2
fi

