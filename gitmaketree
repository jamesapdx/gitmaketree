#!/bin/bash

##########################################################################################
#   
#   gitmaketree - created by Jim Shaffer, 5/11/19
#       The essence of this script is to make a new worktree and create links to/from
#       the new worktree. Benifits
#       - makes it supper easy to switch back and forth from worktree to master (parent)
#       - helps eliminate using the wrong directory when working
#       - adds a few extra checks when creating a worktree so you don't make mistakes
#       - shows ascii tree art
#
#   put this script somewhere in your path
#
#   !! to fix the path from growing when following symbolic links, do:
#       > gitmaketree install
#   this will add the following conditional cd -P alias to .bashrc
#       cd_git () { if [[ -e .git ]] && [[ "$@" =~ ^_ ]]; then \cd -P $@; else \cd $@; fi }; alias cd='cd_git'
#   conditional = only when .git exists and target starts with _
#   probably don't want cd -P all the time, otherwise other directories would be hard to navigate
#
#   Does:
#   1) worktree add <path_new_worktree>  (this will also create a new branch)
#      checks: proper usage, new worktree not in same directory, not on master, uncommitted/unstaged files
#   2) make a symbolic link to the new worktree directory and add that to .gitignore
#   3) make a symbolic link in the new worktree directory back to parent and add that to it's .gitignore
#   4) copy_extra_stuff_path1/2, used to copy stuff that git worktree add might not do
#   
##########################################################################################


# SETTINGS
warn_if_uncommited_unstaged_files=1 #1=yes, 0=no
warn_if_not_on_master=1             #1=yes, 0=no
warn_if_in_current_dir_or_path=1    #1=yes, 0=no
copy_extra_stuff_path1=""
copy_extra_stuff_path2=""
copy_without_overwrite_warning=0    #1=yes, 0=no


# USAGE
usage="\
usage: 
$0 install                       (one time setup, see below)
$0 <path>/<new|existing_branch>  (regular use)

A git worktree is basically a branch in with it's own working directory. This helps
eliminate the confusion associated with switching branches.

This script will make a new git worktree and create links to/from the new worktree.  
It can also be run against existing worktrees or branches, and working directories 
and links will be created as needed.

The worktree should be created outside your existing repository.
    examples:  ../new_branch or /projects/wt/new_branch
<path>/<new|existing_branch> will be create for you, do not create it yourself

To fix the path from growing when following symbolic links, do:
(this will add a conditional cd -P alias to ~/.bashrc)
    > $0 install
    > source ~/.bashrc
    > which cd  (to view details)"

cleanup="\
When done with the worktree, clean up with:
    > cd <link_to_parent>                     (get back to the parent directory)
    > git worktree remove <link_to_worktree>  (this will delete the worktree directory)
    > unlink <link_to_worktree>               (remove the link)
    - merge and delete branch as needed"


add_alias_cd_to_bashrc () {
    echo "creating a conditional cd -P alias in ~/.bashrc"
    echo "this will fix the path from growing when following symbolic links."
    echo "Now please run:"
    echo "    > source ~/.bashrc  (to reload bash into your current session)"
    echo "    > which cd          (to view details)"
    echo
    echo >> ~/.bashrc
    sed -i '/### fix the path from growing/d' ~/.bashrc
    sed -i '/cd_git ()/d' ~/.bashrc
    op='$@'
    echo "### fix the path from growing when following symbolic links in git repositories" >> ~/.bashrc
    echo "cd_git () { if [[ -e .git ]] && [[ \"$op\" =~ ^_ ]]; then \cd -P \"$op\"; else \cd \"$op\"; fi }; alias cd='cd_git'" >> ~/.bashrc
}


gitmaketree_function () {
    if [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) != "true" ]]; then
        echo "Not in a working repository. Exiting"
        exit 1
    else
        # WARNINGS
        rp=$(realpath "$1" 2>/dev/null); 
        if [[ -z $rp ]]; then rp="$1"; fi
        if (( $warn_if_in_current_dir_or_path )) && ( ! [[ "$rp" =~ "/" ]] || [[ "$(pwd)" =~ "$rp" ]] || [[ "$rp" =~ "$(pwd)" ]] ); then
            echo "WARNING: Worktree path should not be created inside the current directory or a sub-path"
            echo "     Current path      : $(pwd)"
            echo "     New worktree path : $rp"
            read -p "Continue [Y/N]? " reply1
            if ! [[ $reply1 =~ ^[Yy] ]]; then
                exit
            fi
        fi
        if (( $warn_if_not_on_master )) && [[ $(git rev-parse --abbrev-ref HEAD 2>/dev/null) != "master" ]]; then
            echo "WARNING: Not on master branch or latest commit:"
            git log --oneline | sed 's/^/    /g'
            read -p "Continue [Y/N]? " reply2
            if ! [[ $reply2 =~ ^[Yy] ]]; then
                exit
            fi
        fi
        if (( $warn_if_uncommited_unstaged_files )) && [[ $(git status --porcelain 2>/dev/null) ]]; then
            echo "WARNING: Uncommitted or unstaged files exist:"
            git status --porcelain | sed 's/^/    /g'
            read -p "Continue [Y/N]? " reply3
            if ! [[ $reply3 =~ ^[Yy] ]]; then
                exit
            fi
        fi

        # CREATE WORKTREE
        branch_name=$(basename "$1")
        output=$(git worktree add "$1" 2>&1)
        error=$?
        if [[ $error == "128" ]] && [[ $output =~ "already exists" ]]; then
            echo "> worktree already exists. Enabling copy warnings and continuing..."
            copy_without_overwrite_warning=0    #1=yes, 0=no
        elif (( $error )); then
            echo $output
            echo "Error using git worktree add ${1}.  Exiting"
            exit 1 
        fi
        sleep .5

        # CREATE BRANCH LINK AND ADD TO GITIGNORE
        worktree_absolute_path=$(realpath "$1")
        ln -sf "$worktree_absolute_path" "_$branch_name"
        if (( $? )); then
            echo "Error unable to create link _$branch_name"
        else
            echo "> _$branch_name link created"
            if ! [[ -e .gitignore ]]; then
                echo -e "\n.gitignore" >> .gitignore
                echo "> .gitignore created. .gitignore added to itself"
            else
                echo "> .gitignore already exists. .gitignore NOT added to itself. add manually if desired"
            fi
            sed -i '/^${branch_name}$/d' .gitignore
            echo -e "\n_${branch_name}" >> .gitignore
            echo "> _${branch_name} added to .gitignore"
        fi

        # CREATE PARENT LINK AND ADD TO GITIGNORE
        echo "> working in ${worktree_absolute_path}/ now"
        cwd=$(pwd)
        ln -sf "$cwd" "${worktree_absolute_path}/_parent"
        if (( $? )); then
            echo "Error unable to create link ${worktree_absolute_path}/_parent"
        else
            echo "> _parent link created"
            if ! [[ -e "${1}/.gitignore" ]]; then
                echo -e "\n.gitignore" >> "${1}/.gitignore"
                echo "> .gitignore created. .gitignore added to itself"
            else
                echo "> .gitignore already exists. .gitignore NOT added to itself"
            fi
            sed -i '/^_parent$/d' "${1}/.gitignore"
            echo -e "\n_parent" >> "${1}/.gitignore"
            echo "> _parent added to .gitignore"
        fi

        # COPY EXTRA STUFF
        if [[ -n $copy_extra_stuff_path1 ]]; then
            echo "> copying $copy_extra_stuff_path1 to $1"
            if (( $copy_without_overwrite_warning )); then
                \cp -r "$copy_extra_stuff_path1" "$1"
                error=$?
            else
                \cp -ri "$copy_extra_stuff_path1" "$1"
                error=$?
            fi
            (( $error )) && echo "Error unable to copy $copy_extra_stuff_path1 to $1"
        fi
        if [[ -n $copy_extra_stuff_path2 ]]; then
            echo "> copying $copy_extra_stuff_path2 to $1"
            if (( $copy_without_overwrite_warning )); then
                \cp -r "$copy_extra_stuff_path2" "$1"
                error=$?
            else
                \cp -ri "$copy_extra_stuff_path2" "$1"
                error=$?
            fi
            (( $error )) && echo "Error unable to copy $copy_extra_stuff_path2 to $1"
        fi
    fi
echo
echo "$cleanup"
}


##########################################################################################
#   
#  Start Here
#   
##########################################################################################

trees="\
                 ,@@@@@@@,
         ,,,.   ,@@@@@@/@@,  .oo8888o.
      ,&%%&%&&%,@@@@@/@@@@@@,8888&88/8o
     ,%&$%&&%&&%,@@@&@@@/@@@88&88888/88'
     %&&%&%&/%&&%@@&@@/ /@@@88888&88888'
     %&&%/ %&%%&&@@& V /@@' '88&8 '/88'
     '&%\ ' /%&'    |.|        \ '|8'
         |o|        | |         | |
         |.|        | |         | |
  jgs \/ ._\//_/__/  ,\_//__\/.  \_//__/_
" # https://asciiart.website/index.php?art=plants/trees

i_hate_trees=0
if (( ! $i_hate_trees )); then
    echo "$trees"
fi

base_name=$(basename $(echo $1 | tr " " ":") 2>/dev/null)
if [[ $base_name =~ ^[\.]|[\ \^\\\:\~] ]]; then
    echo "Spaces and certain special characters not allowed in the last directory (branch name). Exiting"
elif [[ -z $1 ]] || [[ $1 == "-h" ]] || [[ -n $2 ]]; then
    echo "$usage"
    echo
    echo "$cleanup"
elif [[ $1 == "install" ]]; then
    add_alias_cd_to_bashrc
else
    gitmaketree_function $1
fi

